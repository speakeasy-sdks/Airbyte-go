// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AdvancedAuthAuthFlowTypeEnum string

const (
	AdvancedAuthAuthFlowTypeEnumOauth20 AdvancedAuthAuthFlowTypeEnum = "oauth2.0"
	AdvancedAuthAuthFlowTypeEnumOauth10 AdvancedAuthAuthFlowTypeEnum = "oauth1.0"
)

func (e AdvancedAuthAuthFlowTypeEnum) ToPointer() *AdvancedAuthAuthFlowTypeEnum {
	return &e
}

func (e *AdvancedAuthAuthFlowTypeEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "oauth2.0":
		fallthrough
	case "oauth1.0":
		*e = AdvancedAuthAuthFlowTypeEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AdvancedAuthAuthFlowTypeEnum: %v", v)
	}
}

type AdvancedAuth struct {
	AuthFlowType             *AdvancedAuthAuthFlowTypeEnum `json:"authFlowType,omitempty"`
	OauthConfigSpecification *OAuthConfigSpecification     `json:"oauthConfigSpecification,omitempty"`
	// Json Path to a field in the connectorSpecification that should exist for the advanced auth to be applicable.
	PredicateKey []string `json:"predicateKey,omitempty"`
	// Value of the predicate_key fields for the advanced auth to be applicable.
	PredicateValue *string `json:"predicateValue,omitempty"`
}
